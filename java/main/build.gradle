apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    valueTypesTestCompile.extendsFrom testCompile
}

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    testCompile 'junit:junit:4.+'

    testCompile 'org.ow2.asm:asm-tree:7.2'
    testCompile 'org.ow2.asm:asm-util:7.2'
    testCompile 'org.json:json:20171018'
    valueTypesTestCompile 'com.epam.deltix:value-types:0.9.3'
}

jar {
    manifest {
        attributes 'Implementation-Title': ' Date & Time Classes',
                   'Implementation-Version': version
    }
}

test.outputs.upToDateWhen { false }

task valueTypesTest(type: Test) {
    dependsOn classes
    outputs.upToDateWhen { false }
    def vtAgentJar = configurations.valueTypesTestCompile.find {it.name.startsWith('value-types')}
    def valueTypeAgent = '-javaagent:' + vtAgentJar + '=' + rootDir + "/java/hdt-vt.json"
    jvmArgs += valueTypeAgent
    testLogging {
        exceptionFormat 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    group = 'verification'
}

def rUser = findProperty('SONATYPE_NEXUS_USERNAME') ?:  System.getenv('SONATYPE_NEXUS_USERNAME') ?: "FakeUser"
def rPass = findProperty('SONATYPE_NEXUS_PASSWORD') ?:  System.getenv('SONATYPE_NEXUS_PASSWORD') ?: "FakePass"

publishing {
    repositories {
        maven {
            url = findProperty('SONATYPE_REPOSITORY') ?: System.getenv('SONATYPE_REPOSITORY') ?: "FakeRepo"

            credentials {
                username rUser
                password rPass
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'value-types'
                packaging = 'jar'
                description = 'Java Agent classloader to implement transformation of operations on specific classes into operations on long integer values.'
                url = 'https://github.com/epam/ValuesTypes4Java'

                scm {
                    connection = 'scm:git:https://github.com/epam/ValuesTypes4Java.git'
                    developerConnection = 'scm:git:https://github.com/epam/ValuesTypes4Java.git'
                    url = 'https://github.com/epam/ValuesTypes4Java.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'alex-karpovich'
                        name = 'Alexander Karpovich'
                        email = 'aliaksandr_karpovich@epam.com'
                        url = 'https://github.com/alex-karpovich'
                        organization = 'EPAM Systems'
                        organizationUrl = 'https://www.epam.com/'
                    }
                }
            }
        }
    }

    signing {
        def signingKey = findProperty('SIGNING_PRIVATE_KEY') ?: System.getenv('SIGNING_PRIVATE_KEY') ?: "FakeUser"
        def signingPassword = findProperty('SIGNING_PASSWORD') ?: System.getenv('SIGNING_PASSWORD') ?: "FakePass"

        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava

        required { isReleaseVersion }
    }
}